"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExperimentalFeaturesRange = exports.getAllPreviewFeaturesFromGenerators = exports.getFirstDatasourceProvider = exports.getFirstDatasourceName = void 0;
const _1 = require(".");
const findAtPosition_1 = require("./findAtPosition");
function getFirstDatasourceName(lines) {
    const datasourceBlockFirstLine = lines.find((l) => l.startsWith('datasource') && l.includes('{'));
    if (!datasourceBlockFirstLine) {
        return undefined;
    }
    const indexOfBracket = datasourceBlockFirstLine.indexOf('{');
    return datasourceBlockFirstLine.slice('datasource'.length, indexOfBracket).trim();
}
exports.getFirstDatasourceName = getFirstDatasourceName;
function getFirstDatasourceProvider(lines) {
    // matches provider inside datasource in any position
    // thanks to https://regex101.com for the online scratchpad
    const result = /datasource.*\{(\n|\N)\s*(.*\n)?\n*\s*provider\s=\s(\"(.*)\")[^}]+}/.exec(lines.join('\n'));
    if (!result || !result[4]) {
        return undefined;
    }
    const datasourceProvider = result[4];
    if (typeof datasourceProvider === 'string' && datasourceProvider.length >= 1) {
        return datasourceProvider;
    }
}
exports.getFirstDatasourceProvider = getFirstDatasourceProvider;
function getAllPreviewFeaturesFromGenerators(lines) {
    // matches any `previewFeatures = [x]` in any position
    // thanks to https://regex101.com for the online scratchpad
    const previewFeaturesRegex = /previewFeatures\s=\s(\[.*\])/g;
    // we could match against all the `previewFeatures = [x]` (could be that there is more than one?)
    // var matchAll = text.matchAll(regexp)
    // for (const match of matchAll) {
    //   console.log(match);
    // }
    const result = previewFeaturesRegex.exec(lines.join('\n'));
    if (!result || !result[1]) {
        return undefined;
    }
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const previewFeatures = JSON.parse(result[1]);
        if (Array.isArray(previewFeatures) && previewFeatures.length > 0) {
            return previewFeatures.map((it) => it.toLowerCase());
        }
    }
    catch (e) { }
    return undefined;
}
exports.getAllPreviewFeaturesFromGenerators = getAllPreviewFeaturesFromGenerators;
// TODO (JoÃ«l) can be removed? Since it was renamed to `previewFeatures` a long time ago
function getExperimentalFeaturesRange(document) {
    const lines = (0, _1.convertDocumentTextToTrimmedLineArray)(document);
    const experimentalFeatures = 'experimentalFeatures';
    let reachedStartLine = false;
    for (const [key, item] of lines.entries()) {
        if (item.startsWith('generator') && item.includes('{')) {
            reachedStartLine = true;
        }
        if (!reachedStartLine) {
            continue;
        }
        if (reachedStartLine && item.startsWith('}')) {
            return;
        }
        if (item.startsWith(experimentalFeatures)) {
            const startIndex = (0, findAtPosition_1.getCurrentLine)(document, key).indexOf(experimentalFeatures);
            return {
                start: { line: key, character: startIndex },
                end: { line: key, character: startIndex + experimentalFeatures.length },
            };
        }
    }
}
exports.getExperimentalFeaturesRange = getExperimentalFeaturesRange;
//# sourceMappingURL=configBlock.js.map
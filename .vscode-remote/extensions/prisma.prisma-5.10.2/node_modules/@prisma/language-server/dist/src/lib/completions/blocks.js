"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSuggestionForBlockTypes = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const klona_1 = require("klona");
const internals_1 = require("./internals");
const completions = __importStar(require("./completions.json"));
const ast_1 = require("../ast");
/**
 * ```
 * schema.prisma """
 *  |
 * """
 * ```
 */
const allowedBlockTypes = (0, internals_1.convertToCompletionItems)(completions.blockTypes, vscode_languageserver_1.CompletionItemKind.Class);
/**
 * Returns the currently available _blocks_ for completion.
 * Currently available: Generator, Datasource, Model, Enum, View
 * @param lines
 * @returns the list of block suggestions
 */
function getSuggestionForBlockTypes(lines) {
    // create deep copy
    let suggestions = (0, klona_1.klona)(allowedBlockTypes);
    const datasourceProvider = (0, ast_1.getFirstDatasourceProvider)(lines);
    const previewFeatures = (0, ast_1.getAllPreviewFeaturesFromGenerators)(lines);
    const isEnumAvailable = Boolean(!(datasourceProvider === null || datasourceProvider === void 0 ? void 0 : datasourceProvider.includes('sqlite')));
    const isViewAvailable = Boolean(previewFeatures === null || previewFeatures === void 0 ? void 0 : previewFeatures.includes('views'));
    const isTypeAvailable = Boolean(datasourceProvider === null || datasourceProvider === void 0 ? void 0 : datasourceProvider.includes('mongodb'));
    if (!isEnumAvailable) {
        suggestions = suggestions.filter((item) => item.label !== 'enum');
    }
    if (!isViewAvailable) {
        suggestions = suggestions.filter((item) => item.label !== 'view');
    }
    if (!isTypeAvailable) {
        suggestions = suggestions.filter((item) => item.label !== 'type');
    }
    return {
        items: suggestions,
        isIncomplete: false,
    };
}
exports.getSuggestionForBlockTypes = getSuggestionForBlockTypes;
//# sourceMappingURL=blocks.js.map
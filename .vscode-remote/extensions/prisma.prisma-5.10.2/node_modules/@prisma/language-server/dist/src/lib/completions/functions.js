"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeFunctionCompletion = exports.cuidDefaultCompletion = exports.uuidDefaultCompletion = exports.nowDefaultCompletion = exports.autoincrementDefaultCompletion = exports.dbgeneratedDefaultCompletion = exports.sequenceDefaultCompletion = exports.autoDefaultCompletion = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
//#region MONGODB ONLY
const autoDefaultCompletion = (items) => items.push({
    label: 'auto()',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: 'Represents default values that are automatically generated by the database.',
    insertText: 'auto()',
    insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
});
exports.autoDefaultCompletion = autoDefaultCompletion;
//#endregion
//#region COCKROACHDB ONLY
const sequenceDefaultCompletion = (items) => items.push({
    label: 'sequence()',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: 'Create a sequence of integers in the underlying database and assign the incremented values to the ID values of the created records based on the sequence.',
});
exports.sequenceDefaultCompletion = sequenceDefaultCompletion;
//#endregion
const dbgeneratedDefaultCompletion = (items) => items.push({
    label: 'dbgenerated("")',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: 'The SQL definition of the default value which is generated by the database. This is not validated by Prisma.',
    insertText: 'dbgenerated("$0")',
    insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
});
exports.dbgeneratedDefaultCompletion = dbgeneratedDefaultCompletion;
const autoincrementDefaultCompletion = (items) => items.push({
    label: 'autoincrement()',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: 'Create a sequence of integers in the underlying database and assign the incremented values to the ID values of the created records based on the sequence.',
});
exports.autoincrementDefaultCompletion = autoincrementDefaultCompletion;
const nowDefaultCompletion = (items) => items.push({
    label: 'now()',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: {
        kind: vscode_languageserver_1.MarkupKind.Markdown,
        value: 'Set a timestamp of the time when a record is created.',
    },
});
exports.nowDefaultCompletion = nowDefaultCompletion;
const uuidDefaultCompletion = (items) => items.push({
    label: 'uuid()',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: {
        kind: vscode_languageserver_1.MarkupKind.Markdown,
        value: 'Generate a globally unique identifier based on the [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) spec.',
    },
});
exports.uuidDefaultCompletion = uuidDefaultCompletion;
const cuidDefaultCompletion = (items) => items.push({
    label: 'cuid()',
    kind: vscode_languageserver_1.CompletionItemKind.Function,
    documentation: {
        kind: vscode_languageserver_1.MarkupKind.Markdown,
        value: 'Generate a globally unique identifier based on the [cuid](https://github.com/ericelliott/cuid) spec.',
    },
});
exports.cuidDefaultCompletion = cuidDefaultCompletion;
const nativeFunctionCompletion = (items, element, documentation) => items.push({
    label: `${element.name}()`,
    kind: vscode_languageserver_1.CompletionItemKind.TypeParameter,
    insertText: `${element.name}($0)`,
    documentation: { kind: vscode_languageserver_1.MarkupKind.Markdown, value: documentation },
    insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
});
exports.nativeFunctionCompletion = nativeFunctionCompletion;
//# sourceMappingURL=functions.js.map
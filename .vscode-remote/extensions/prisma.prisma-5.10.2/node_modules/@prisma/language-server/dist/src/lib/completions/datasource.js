"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataSourceSuggestions = void 0;
const klona_1 = require("klona");
const vscode_languageserver_1 = require("vscode-languageserver");
const internals_1 = require("./internals");
const completions = __importStar(require("./completions.json"));
const dataSourceProviders = (0, internals_1.convertToCompletionItems)(completions.datasourceProviders, vscode_languageserver_1.CompletionItemKind.Constant);
/**
 * ```prisma
 * datasource db {
 *  provider = "|"
 * }
 * ```
 */
const dataSourceProviderArguments = (0, internals_1.convertToCompletionItems)(completions.datasourceProviderArguments, vscode_languageserver_1.CompletionItemKind.Property);
/**
 * ```prisma
 * datasource db {
 *  relationMode = "|"
 * }
 * ```
 */
const relationModeValues = (0, internals_1.convertToCompletionItems)(completions.relationModeValues, vscode_languageserver_1.CompletionItemKind.Field);
const dataSourceSuggestions = (currentLine, isInsideQuotation, datasourceProvider) => {
    // provider
    if (currentLine.startsWith('provider')) {
        const providers = dataSourceProviders;
        if (isInsideQuotation) {
            return {
                items: providers,
                isIncomplete: true,
            };
        }
        else {
            return {
                items: dataSourceProviderArguments,
                isIncomplete: true,
            };
        }
    }
    // // url or shadowDatabaseUrl or directUrl
    // else if (
    //   currentLine.startsWith('url') ||
    //   currentLine.startsWith('shadowDatabaseUrl') ||
    //   currentLine.startsWith('directUrl')
    // ) {
    //   // check if inside env
    //   if (isInsideAttribute(currentLineUntrimmed, position, '()')) {
    //     if (currentLine.startsWith('url')) {
    //       return {
    //         items: [{ label: 'DATABASE_URL' }],
    //         isIncomplete: false,
    //       }
    //     } else if (currentLine.startsWith('shadowDatabaseUrl')) {
    //       return {
    //         items: [{ label: 'SHADOW_DATABASE_URL' }],
    //         isIncomplete: false,
    //       }
    //     } else if (currentLine.startsWith('directUrl')) {
    //       return {
    //         items: [{ label: 'DIRECT_URL' }],
    //         isIncomplete: false,
    //       }
    //     }
    //   }
    // }
    // `relationMode` can only be set for SQL databases
    else if (currentLine.startsWith('relationMode') && datasourceProvider !== 'mongodb') {
        const relationModeValuesSuggestion = relationModeValues;
        // values inside quotes `"value"`
        const relationModeValuesSuggestionWithQuotes = (0, klona_1.klona)(relationModeValuesSuggestion).map((suggestion) => {
            suggestion.label = `"${suggestion.label}"`;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            suggestion.insertText = `"${suggestion.insertText}"`;
            return suggestion;
        });
        if (isInsideQuotation) {
            return {
                items: relationModeValuesSuggestion,
                isIncomplete: false,
            };
        }
        // If line ends with `"`, a value is already set.
        else if (!currentLine.endsWith('"')) {
            return {
                items: relationModeValuesSuggestionWithQuotes,
                isIncomplete: false,
            };
        }
    }
};
exports.dataSourceSuggestions = dataSourceSuggestions;
//# sourceMappingURL=datasource.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSuggestionForFieldAttribute = exports.getSuggestionForBlockAttribute = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const klona_1 = require("klona");
const internals_1 = require("./internals");
const completions = __importStar(require("./completions.json"));
const ast_1 = require("../ast");
const types_1 = require("./types");
const fieldAttributes = (0, internals_1.convertAttributesToCompletionItems)(completions.fieldAttributes, vscode_languageserver_1.CompletionItemKind.Property);
const blockAttributes = (0, internals_1.convertAttributesToCompletionItems)(completions.blockAttributes, vscode_languageserver_1.CompletionItemKind.Property);
const filterContextBlockAttributes = (block, lines, suggestions) => {
    // We can filter on the datasource
    const datasourceProvider = (0, ast_1.getFirstDatasourceProvider)(lines);
    // We can filter on the previewFeatures enabled
    const previewFeatures = (0, ast_1.getAllPreviewFeaturesFromGenerators)(lines);
    // Full text indexes (MySQL and MongoDB)
    // https://www.prisma.io/docs/concepts/components/prisma-schema/indexes#full-text-indexes-mysql-and-mongodb
    const isFullTextAvailable = Boolean(datasourceProvider &&
        ['mysql', 'mongodb'].includes(datasourceProvider) &&
        (previewFeatures === null || previewFeatures === void 0 ? void 0 : previewFeatures.includes('fulltextindex')));
    const isMultiSchemaAvailable = Boolean(datasourceProvider &&
        (datasourceProvider.includes('postgres') ||
            datasourceProvider.includes('cockroachdb') ||
            datasourceProvider.includes('sqlserver')) &&
        (previewFeatures === null || previewFeatures === void 0 ? void 0 : previewFeatures.includes('multischema')));
    if (isFullTextAvailable === false) {
        // fullTextIndex is not available, we need to filter it out
        suggestions = suggestions.filter((arg) => arg.label !== '@@fulltext');
    }
    if (!isMultiSchemaAvailable) {
        suggestions = suggestions.filter((item) => item.label !== '@@schema');
    }
    return suggestions;
};
/**
 * Removes all block attribute suggestions that are invalid in this context.
 * E.g. `@@id()` when already used should not be in the suggestions.
 */
function filterSuggestionsForBlock(suggestions, block, lines) {
    let reachedStartLine = false;
    for (const [key, item] of lines.entries()) {
        if (key === block.range.start.line + 1) {
            reachedStartLine = true;
        }
        if (!reachedStartLine) {
            continue;
        }
        if (key === block.range.end.line) {
            break;
        }
        // Ignore commented lines
        if (!item.startsWith('//')) {
            // TODO we should also remove the other suggestions if used (default()...)
            // * Filter already-present attributes that can't be duplicated
            ;
            ['@id', '@@map', '@@ignore', '@@schema'].forEach((label) => {
                if (item.includes(label)) {
                    suggestions = suggestions.filter((suggestion) => suggestion.label !== label);
                    if (label === '@@ignore') {
                        suggestions = suggestions.filter((suggestion) => suggestion.label !== '@ignore');
                    }
                    if (label === '@id') {
                        suggestions = suggestions.filter((suggestion) => suggestion.label !== '@@id');
                    }
                }
            });
        }
    }
    return suggestions;
}
const dataSourceNameCompletion = (items, datasourceName) => items.push({
    // https://code.visualstudio.com/docs/editor/intellisense#_types-of-completions
    kind: vscode_languageserver_1.CompletionItemKind.Property,
    label: '@' + datasourceName,
    documentation: 'Defines a native database type that should be used for this field. See https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#native-types-mapping',
    insertText: `@${datasourceName}$0`,
    insertTextFormat: vscode_languageserver_1.InsertTextFormat.Snippet,
});
/**
 * Removes all line attribute suggestions that are invalid in this context.
 * E.g. `@map()` when already used should not be in the suggestions.
 */
function filterSuggestionsForLine(suggestions, currentLine, fieldType, fieldBlockType) {
    if (fieldBlockType === 'type') {
        // @default & @relation are invalid on field referencing a composite type
        // we filter them out
        suggestions = suggestions.filter((sugg) => sugg.label !== '@default' && sugg.label !== '@relation');
    }
    // Tom: I think we allow ids on basically everything except relation fields
    // so it doesn't need to be restricted to Int and String.
    // These are terrible, terrible ideas of course, but you can have id DateTime @id or id Float @id.
    // TODO: decide if we want to only suggest things that make most sense or everything that is technically possible.
    const isAtIdAllowed = fieldType === 'Int' || fieldType === 'String' || fieldBlockType === 'enum';
    if (!isAtIdAllowed) {
        // id not allowed
        suggestions = suggestions.filter((suggestion) => suggestion.label !== '@id');
    }
    const isUpdatedAtAllowed = fieldType === 'DateTime';
    if (!isUpdatedAtAllowed) {
        // updatedAt not allowed
        suggestions = suggestions.filter((suggestion) => suggestion.label !== '@updatedAt');
    }
    // * Filter already-present attributes that can't be duplicated
    fieldAttributes.forEach(({ label }) => {
        if (currentLine.includes(label)) {
            suggestions = suggestions.filter((suggestion) => suggestion.label !== label);
        }
    });
    return suggestions;
}
/**
 * * Only models and views currently support block attributes
 */
function getSuggestionForBlockAttribute(block, lines) {
    if (!['model', 'view'].includes(block.type)) {
        return [];
    }
    const suggestions = filterSuggestionsForBlock((0, klona_1.klona)(blockAttributes), block, lines);
    return filterContextBlockAttributes(block, lines, suggestions);
}
exports.getSuggestionForBlockAttribute = getSuggestionForBlockAttribute;
/**
 * Should suggest all field attributes for a given field
 * EX: id Int |> @id, @default, @datasourceName, ...etc
 *
 * If `@datasourceName.` |> suggests nativeTypes
 * @param block
 * @param currentLine
 * @param lines
 * @param wordsBeforePosition
 * @param document
 * @returns
 */
function getSuggestionForFieldAttribute(block, currentLine, lines, wordsBeforePosition, document, onError) {
    const fieldType = (0, ast_1.getFieldType)(currentLine);
    // If we don't find a field type (e.g. String, Int...), return no suggestion
    if (!fieldType) {
        return;
    }
    let suggestions = [];
    // Because @.?
    if (wordsBeforePosition.length >= 2) {
        const datasourceName = (0, ast_1.getFirstDatasourceName)(lines);
        const prismaType = wordsBeforePosition[1];
        const nativeTypeSuggestions = (0, types_1.getNativeTypes)(document, prismaType, onError);
        if (datasourceName) {
            if (!currentLine.includes(`@${datasourceName}`)) {
                dataSourceNameCompletion(suggestions, datasourceName);
            }
            if (nativeTypeSuggestions.length !== 0) {
                if (
                // Check that we are not separated by a space like `@db. |`
                wordsBeforePosition[wordsBeforePosition.length - 1] === `@${datasourceName}`) {
                    suggestions.push(...nativeTypeSuggestions);
                    return {
                        items: suggestions,
                        isIncomplete: false,
                    };
                }
            }
        }
    }
    suggestions.push(...fieldAttributes);
    const datamodelBlock = (0, ast_1.getDatamodelBlock)(fieldType, lines);
    suggestions = filterSuggestionsForLine(suggestions, currentLine, fieldType, datamodelBlock === null || datamodelBlock === void 0 ? void 0 : datamodelBlock.type);
    suggestions = filterSuggestionsForBlock(suggestions, block, lines);
    return {
        items: suggestions,
        isIncomplete: false,
    };
}
exports.getSuggestionForFieldAttribute = getSuggestionForFieldAttribute;
//# sourceMappingURL=attributes.js.map